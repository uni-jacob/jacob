from typing import List

from pony import orm
from vkwave.bots import Keyboard

from jacob.database import redis
from jacob.database.utils import admin, students
from jacob.database.utils.storages import managers
from jacob.services import keyboard as kbs
from jacob.services.keyboard.common import Keyboards, StudentsNavigator

JSONStr = str


class CallKeyboards(Keyboards):
    """–ù–∞–±–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –ü—Ä–∏–∑—ã–≤–∞."""

    def __init__(self, admin_id: int, return_to: str):
        super().__init__(admin_id)
        self.return_to = return_to

    @orm.db_session
    def menu(self, group_ids: List[int]) -> str:
        """
        –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–∑—ã–≤–∞ (–ø–æ–ª–æ–≤–∏–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –æ—Ç–º–µ–Ω–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å).

        Args:
            group_ids: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø

        Returns:
            str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        kb = kbs.common.alphabet(group_ids)
        if len(kb.buttons[-1]):
            kb.add_row()
        kb.add_text_button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", payload={"button": "save_selected"})
        kb.add_text_button(text="üìú –ü—Ä–µ—Å–µ—Ç—ã", payload={"button": "presets"})
        kb.add_row()
        kb.add_text_button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", payload={"button": "call"})
        if len(admin.get_admin_feud(self.admin_id)) > 1:
            kb.add_text_button(
                "–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—ã",
                payload={"button": "mention_select_groups"},
            )
        kb.add_row()
        kb.add_text_button(text="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"})

        return kb.get_keyboard()

    async def submenu(self, half: int) -> str:
        """
        –ü–æ–¥–º–µ–Ω—é –ø—Ä–∏–∑—ã–≤–∞ (—Å–ø–∏—Å–æ–∫ –±—É–∫–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª–æ–≤–∏–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞).

        Args:
            half: –ò–Ω–¥–µ–∫—Å –ø–æ–ª–æ–≤–∏–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞

        Returns:
            str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

        """
        group_ids: List[int] = list(
            map(
                int,
                await redis.lget(
                    "mention_selected_groups:{0}".format(self.admin_id),
                ),
            ),
        )
        if not group_ids:
            group_ids = [admin.get_active_group(self.admin_id).id]
        alphabet = students.get_unique_second_name_letters_in_a_group(
            group_ids,
        )
        half_len = len(alphabet) // 2
        halves = alphabet[:half_len], alphabet[half_len:]

        kb = Keyboard()

        for letter in halves[half]:
            if len(kb.buttons[-1]) == 4:
                kb.add_row()
            kb.add_text_button(letter, payload={"button": "letter", "value": letter})
        if kb.buttons[-1]:
            kb.add_row()
        kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": self.return_to})

        return kb.get_keyboard()

    @orm.db_session
    def students(self, group_ids: List[int], letter: str) -> str:
        """
        –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –±—É–∫–≤—É.

        Args:
            group_ids: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø
            letter: –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

        Returns:
            str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

        """
        data = students.get_list_of_students_by_letter(group_ids, letter)
        selected = managers.MentionStorageManager(
            self.admin_id,
        ).get_mentioned_students()
        half_index = self._find_half_index_of_letter(letter)
        kb = Keyboard()
        for item in data:
            if len(kb.buttons[-1]) == 2:
                kb.add_row()
            label = " "
            if item.id in selected:
                label = "‚úÖ "
            kb.add_text_button(
                text=f"{label}{item.last_name} {item.first_name}",
                payload={
                    "button": "student",
                    "student_id": item.id,
                    "letter": letter,
                    "name": f"{item.last_name} {item.first_name}",
                },
            )
        if kb.buttons[-1]:
            kb.add_row()
        kb.add_text_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            payload={"button": "half", "half": half_index},
        )

        return kb.get_keyboard()


class CallNavigator(StudentsNavigator):
    def __init__(self, admin_id: int):
        super().__init__(admin_id)
        self.return_to = "skip_call_message"

    def render(self):
        return CallKeyboards(self.admin_id, self.return_to)


def skip_call_message() -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–∞.

    Returns:
        JSONStr: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    kb = Keyboard()
    kb.add_text_button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", payload={"button": "skip_call_message"})

    kb.add_text_button(text="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"})
    return kb.get_keyboard()


def call_prompt(admin_id: int) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–∏–∑—ã–≤–∞.

    Args:
        admin_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Returns:
        JSONStr:  –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = kbs.common.prompt()
    kb.add_row()
    store = managers.AdminConfigManager(admin_id)
    if store.get_names_usage():
        names_emoji = "‚úÖ"
    else:
        names_emoji = "üö´"
    chat_emoji = "üì°"
    kb.add_text_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "skip_call_message"})
    kb.add_row()
    kb.add_text_button(
        text=f"{names_emoji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞",
        payload={"button": "names_usage"},
    )
    kb.add_text_button(
        text=f"{chat_emoji} –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —á–∞—Ç",
        payload={"button": "chat_config"},
    )
    return kb.get_keyboard()


def presets():
    kb = Keyboard()

    kb.add_text_button(text="–í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã", payload={"button": "call_all"})
    kb.add_text_button("–ü–æ–¥–≥—Ä—É–ø–ø—ã", payload={"button": "subgroups"})
    kb.add_row()
    kb.add_text_button("–§–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è", payload={"button": "academic_statuses"})
    kb.add_row()
    kb.add_text_button("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ—Å–µ—Ç—ã", payload={"button": "custom_presets"})
    kb.add_row()
    kb.add_text_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "skip_call_message"})

    return kb.get_keyboard()


@orm.db_session
def list_of_groups(admin_id: int, selected: List[int]):
    kb = Keyboard()

    groups = admin.get_admin_feud(admin_id)

    for group in groups:
        if len(kb.buttons) == 2:
            kb.add_row()
        label = ""
        if group.id in selected:
            label = "‚úÖ "

        kb.add_text_button(
            "{0}{1}".format(label, group.group_num),
            payload={"button": "group", "group": group.id},
        )

    if kb.buttons[-1]:
        kb.add_row()

    kb.add_text_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", payload={"button": "mention_save_selected_groups"})

    return kb.get_keyboard()
