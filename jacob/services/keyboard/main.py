import typing

from loguru import logger
from pony import orm
from vkwave.bots import Keyboard

from jacob.database.utils import admin, uni
from jacob.services import media

JSONStr = str


def main_menu(admin_id: int) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Args:
        admin_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        JSONStr: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π

    """
    is_admin = admin.is_user_admin(admin_id)
    logger.debug(f"{is_admin=}")
    kb = Keyboard()
    if is_admin:
        kb.add_text_button(text="üì¢ –ü—Ä–∏–∑—ã–≤", payload={"button": "call"})
        kb.add_text_button(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", payload={"button": "finances"})
        kb.add_row()
    if is_admin:
        kb.add_text_button(text="üìï –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≥—Ä—É–ø–ø—ã", payload={"button": "group_mgmt"})
        kb.add_row()
        kb.add_text_button(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", payload={"button": "settings"})
        kb.add_row()
    kb.add_text_button(
        text="‚ö† –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        payload={"button": "report_error"},
    )
    return kb.get_keyboard()


def choose_register_way() -> JSONStr:
    kb = Keyboard()

    kb.add_text_button(
        text="–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞",
        payload={"button": "create_new_group"},
    )
    kb.add_text_button(
        text="–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞",
        payload={"button": "choose_existing_group"},
    )

    return kb.get_keyboard()


@orm.db_session
def universities() -> Keyboard:
    kb = Keyboard()

    unies = uni.get_all()

    for university in unies:
        if len(kb.buttons[-1]) == 2:
            kb.add_row()

        kb.add_text_button(
            media.get_university_abbreviation(university.name),
            payload={
                "button": "university",
                "university": university.id,
            },
        )

    if kb.buttons[-1]:
        kb.add_row()

    return kb


def universities_with_create() -> JSONStr:

    kb = universities()

    kb.add_text_button("‚ûï –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", payload={"button": "create_university"})

    kb.add_row()

    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "main_menu"})

    return kb.get_keyboard()


def universities_without_create() -> JSONStr:
    kb = universities()

    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "main_menu"})

    return kb.get_keyboard()


def group_privacy():
    kb = Keyboard()

    kb.add_text_button("–ü—É–±–ª–∏—á–Ω–∞—è", payload={"button": "group_privacy", "value": False})
    kb.add_text_button("–ü—Ä–∏–≤–∞—Ç–Ω–∞—è", payload={"button": "group_privacy", "value": True})

    kb.add_row()

    kb.add_text_button("üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel"})

    return kb.get_keyboard()


def public_groups(university: typing.Optional[int]):
    kb = Keyboard()

    if university is None:
        raise TypeError("–ó–Ω–∞—á–µ–Ω–∏–µ university –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    with orm.db_session:
        groups = uni.get_public_groups(university)

        for group in groups:
            if len(kb.buttons[-1]) == 2:
                kb.add_row()

            kb.add_text_button(
                group.group_num, payload={"button": "group", "group": group.id}
            )

    if kb.buttons[-1]:
        kb.add_row()

    kb.add_text_button("üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel"})

    return kb.get_keyboard()
