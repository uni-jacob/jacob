import os
import typing as t
from abc import ABC
from abc import abstractmethod

from pony import orm
from vkwave.api import API
from vkwave.bots import Keyboard
from vkwave.client import AIOHTTPClient

from jacob.database.utils import admin, chats, students, groups, lists
from jacob.database.utils.storages import managers
from jacob.services import chats as chat_utils

JSONStr = str
api_session = API(tokens=os.getenv("VK_TOKEN"), clients=AIOHTTPClient())
api = api_session.get_context()


class Keyboards(ABC):
    """–ë–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""

    @abstractmethod
    def __init__(self, admin_id: int):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

        Args:
            admin_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        self.admin_id = admin_id
        self.return_to = ""

    @abstractmethod
    def menu(self) -> str:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–∏, —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö."""
        pass

    @abstractmethod
    def submenu(self, half: int) -> str:
        alphabet = students.get_unique_second_name_letters_in_a_group(
            admin.get_active_group(self.admin_id),
        )
        half_len = len(alphabet) // 2
        halfs = alphabet[:half_len], alphabet[half_len:]

        kb = Keyboard()

        for letter in halfs[half]:
            if len(kb.buttons[-1]) == 4:
                kb.add_row()
            kb.add_text_button(letter, payload={"button": "letter", "value": letter})
        if kb.buttons[-1]:
            kb.add_row()
        kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": self.return_to})

        return kb.get_keyboard()

    @orm.db_session
    @abstractmethod
    def students(self, letter: str) -> str:
        data = students.get_list_of_students_by_letter(self.admin_id, letter)
        selected = managers.MentionStorageManager(
            self.admin_id
        ).get_mentioned_students()
        half_index = self._find_half_index_of_letter(letter)
        kb = Keyboard()
        for item in data:
            if len(kb.buttons[-1]) == 2:
                kb.add_row()
            label = " "
            if item.id in selected:
                label = "‚úÖ "
            kb.add_text_button(
                text=f"{label}{item.last_name} {item.first_name}",
                payload={
                    "button": "student",
                    "student_id": item.id,
                    "letter": letter,
                    "name": f"{item.last_name} {item.first_name}",
                },
            )
        if kb.buttons[-1]:
            kb.add_row()
        kb.add_text_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            payload={"button": "half", "half": half_index},
        )

        return kb.get_keyboard()

    def _get_halfs_of_alphabet(self) -> t.Tuple[t.List[str]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–æ–≤–∏–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

        Returns:
            t.Tuple[t.List[str]]: –ü–æ–ª–æ–≤–∏–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞
        """
        alphabet = students.get_unique_second_name_letters_in_a_group(
            admin.get_active_group(self.admin_id),
        )
        half_len = len(alphabet) // 2

        return alphabet[:half_len], alphabet[half_len:]

    def _find_half_index_of_letter(self, letter: str) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤ –∫–∞–∫–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±—É–∫–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –∏–Ω–¥–µ–∫—Å.

        Args:
            letter: –ë—É–∫–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            int: –ò–Ω–¥–µ–∫—Å –ø–æ–ª–æ–≤–∏–Ω—ã
        """
        halfs = self._get_halfs_of_alphabet()

        for index, half in enumerate(halfs):
            if letter in half:
                return index


class StudentsNavigator(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""

    @abstractmethod
    def __init__(self, admin_id: int):
        self.admin_id = admin_id

    @abstractmethod
    def render(self) -> Keyboards:
        return Keyboards(self.admin_id)


def alphabet(admin_id: int) -> Keyboard:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–ª–æ–≤–∏–Ω–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞ —Ñ–∞–º–∏–ª–∏–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

    Args:
        admin_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Returns:
        Keyboard: –§—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    kb = Keyboard()
    alphabet = students.get_unique_second_name_letters_in_a_group(
        admin.get_active_group(admin_id),
    )
    half_len = len(alphabet) // 2
    f_alphabet, s_alphabet = alphabet[:half_len], alphabet[half_len:]
    index = 0
    for half in f_alphabet, s_alphabet:
        if half[0] == half[-1]:
            title = f"{half[0]}"
        else:
            title = f"{half[0]}..{half[-1]}"
        kb.add_text_button(title, payload={"button": "half", "half": index})
        index += 1

    return kb


async def list_of_chats(api_context, admin_id: int):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.

    Args:
        api_context: –û–±—ä–µ–∫—Ç API –í–ö.
        admin_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        Keyboard: –§—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    kb = Keyboard()
    with orm.db_session:
        chat_objects = chats.get_list_of_chats_by_group(
            admin.get_active_group(admin_id),
        )
        for chat in chat_objects:
            chat_title = await chat_utils.get_chat_name(
                api_context,
                chat.vk_id,
            )
            kb.add_text_button(
                chat_title,
                payload={
                    "button": "chat",
                    "chat_id": chat.id,
                },
            )
    return kb


def prompt() -> Keyboard:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è.

    Returns:
        Keyboard: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    kb = Keyboard()
    kb.add_text_button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", payload={"button": "confirm"})
    kb.add_text_button(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", payload={"button": "deny"})
    return kb


def empty() -> JSONStr:
    kb = Keyboard()

    return kb.get_empty_keyboard()


def cancel() -> Keyboard:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è.

    Returns:
        JSONStr: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()

    kb.add_text_button("üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel"})

    return kb


def confirm_with_chat_update():

    kb = prompt()

    if kb.buttons[-1]:
        kb.add_row()

    chat_emoji = "üì°"
    kb.add_text_button(
        text=f"{chat_emoji} –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —á–∞—Ç",
        payload={"button": "chat_config"},
    )

    return kb.get_keyboard()


def cancel_with_cleanup():
    kb = cancel()

    kb.add_row()
    kb.add_text_button("–û—á–∏—Å—Ç–∏—Ç—å", payload={"button": "edit_cleanup"})

    return kb.get_keyboard()


def subgroups(group_id: int):
    kb = Keyboard()

    request = list(filter(bool, groups.get_subgroups_in_group(group_id)))

    for subgroup in request:
        if len(kb.buttons[-1]) == 2:
            kb.add_row()
        kb.add_text_button(
            subgroup, payload={"button": "subgroup", "subgroup": subgroup}
        )

    if kb.buttons[-1]:
        kb.add_row()
    kb.add_text_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "presets"})

    return kb.get_keyboard()


def academic_statuses(group_id: int):
    kb = Keyboard()

    request = list(filter(bool, groups.get_academic_statuses_in_group(group_id)))

    for ac in request:
        if len(kb.buttons[-1]) == 2:
            kb.add_row()
        kb.add_text_button(
            ac.description, payload={"button": "ac_status", "status": ac.id}
        )

    if kb.buttons[-1]:
        kb.add_row()

    kb.add_text_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "presets"})

    return kb.get_keyboard()


def custom_presets(group_id: int):
    kb = Keyboard()

    request = lists.get_lists_of_group(group_id)

    with orm.db_session:
        for preset in request:
            if len(kb.buttons[-1]) == 2:
                kb.add_row()
            kb.add_text_button(
                preset.name, payload={"button": "preset", "preset": preset.id}
            )

    if kb.buttons[-1]:
        kb.add_row()

    kb.add_text_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "presets"})

    return kb.get_keyboard()
